name: Smart Version & Publish

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm run test:ci

  smart-publish:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm run test:ci
      
    - name: Configure git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
    - name: Determine version bump type
      id: version-type
      run: |
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "Commit message: $COMMIT_MSG"
        
        if [[ $COMMIT_MSG =~ ^(BREAKING|breaking).*$ ]] || [[ $COMMIT_MSG =~ .*\[breaking\].* ]]; then
          echo "type=major" >> $GITHUB_OUTPUT
          echo "üö® Major version bump (breaking change)"
        elif [[ $COMMIT_MSG =~ ^(feat|feature).*$ ]] || [[ $COMMIT_MSG =~ .*\[feat\].* ]]; then
          echo "type=minor" >> $GITHUB_OUTPUT
          echo "‚ú® Minor version bump (new feature)"
        elif [[ $COMMIT_MSG =~ ^(fix|patch|bug).*$ ]] || [[ $COMMIT_MSG =~ .*\[fix\].* ]]; then
          echo "type=patch" >> $GITHUB_OUTPUT
          echo "üêõ Patch version bump (bug fix)"
        elif [[ $COMMIT_MSG =~ .*\[skip\].* ]] || [[ $COMMIT_MSG =~ ^(docs|style|refactor|test|chore).*$ ]]; then
          echo "type=none" >> $GITHUB_OUTPUT
          echo "‚≠êÔ∏è Skipping version bump"
        else
          echo "type=patch" >> $GITHUB_OUTPUT
          echo "üì¶ Default patch version bump"
        fi
        
    - name: Auto bump version and publish
      if: steps.version-type.outputs.type != 'none'
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        VERSION_TYPE="${{ steps.version-type.outputs.type }}"
        npm version $VERSION_TYPE --no-git-tag-version
        
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "New version: $NEW_VERSION"
        
        git add package.json
        git commit -m "üöÄ Release v$NEW_VERSION"
        git tag "v$NEW_VERSION"
        git push origin main --tags
        
        npm publish
        
        echo "üéâ Successfully published v$NEW_VERSION to npm!"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Skip publish
      if: steps.version-type.outputs.type == 'none'
      run: echo "‚≠êÔ∏è Skipping publish"